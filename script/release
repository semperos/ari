#!/usr/bin/env goal
(2=#ARGS)or:error"Usage: ./script/release vx.y.z\n"; (FILE,tag):ARGS
DEBUG:0; sh:{?[DEBUG;say "(D) $x";shell x]}
(rx/v\d+\.\d+\.\d+/@tag)or:error"Version must be in format vx.y.z"
vfile:(path.dir FILE) + "/../version.go"
vcode:qq#// DO NOT EDIT THIS FILE. Generated by the ./script/release script.
package ari

// Version of Ari. Run rt.get"v" to access this value at runtime.
const AriVersion = "$tag"
#
say "Writing $tag to $vfile"
vfile print vcode
say "Committing changes for release $tag"
sh"git add version.go"
sh qq/git commit -m "Prepare release $tag"/
sh qq/git tag "$tag"/
say "Pushing commits and tags for release $tag"
sh"git push origin main"
sh qq/git push origin "$tag"/
say "Running 'go list' for release $tag"
sh qq#GOPROXY=proxy.golang.org go list -m "github.com/semperos/ari@$tag"#
