/ This file implements some extra os-related functionality.
/ NOTE: While hopefully written in a portable way which should work on all
/ Unix-like systems using slash-separated paths, and maybe even Windows, the
/ functions are only officially tested on Void Linux and OpenBSD.

/ GOALLIB is a file system value for env"GOALLIB" (at startup).
GOALLIB:{?["e"~@x;x;dirfs x]}@env"GOALLIB"
/ PS represents the path separator.
PS:?["windows"~rt.get"os";"\\";"/"]
/ We define some common errno messages as globals for convenience. We assume
/ them to be consistent in Go accross platforms (which seems be the case AFAIK,
/ but I haven't seen it explicitly documented).
EACCESS:"permission denied"
EEXISTS:"file exists"
EINVAL:"invalid argument"
ENOENT:"no such file or directory"
ENOTEMPTY:"directory not empty"
/ volume[s] returns "" except on Windows, where it (hopefully) returns the
/ leading volume name of a path.
volume:?[PS~"/";:[;""];{rx`^[0-9a-zA-Z]:|^(?:\\\\|/)[^\\./][^\\/]*[\\/][^\\./][^\\/]*`[x;"s"]}]
/ mkdirp[s] is like mkdir, but creates any parent directories if necessary. It
/ does not error if the directory already exists.
mkdirp:{[path]
  (st:stat path)and:st..dir or error..[
    msg:"$path is not a directory";op:"mkdir";path:path;err:"not a directory"]
  ((&volume path)<&parent:getp path)and 'o parent
  or[e:mkdir path;(st:stat path)and st..dir;e]}
/ rmf[s] is like remove s but ignores ENOENT errors.
rmf:{and["e"~@r:remove x;"d"~@d:.r;ENOENT~_d..err]or r}
/ rmtree[s] removes path and any children it contains. USE WITH CAUTION.
rmtree:{[path]
  (path¿"/"".""..""")and:error..[
    msg:"%s: %q"$(EINVAL;path);op:"rmtree";path:path;err:EINVAL]
  {[x;path]
    or[~"e"~@r:rmf path;~"d"~@d:.r;~ENOTEMPTY~_d..err]and:r
    files:abspath'path,'('read path)..name
    (PS~"/")or("e"¿@'files)and:files..*&x!"e"=@'x / abspath could fail on windows (maybe)
    'o/[~"e"~@:;x;files]; rmf path}[1;'abspath path]}

/ helpers below:
getp:sub[?[PS~"/";rx`[^/]*/*$`;rx`[^\\/]*[\\/]*$`];""] / parent folder
1
